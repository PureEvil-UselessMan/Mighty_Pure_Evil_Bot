#C:/Users/tramp/source/repos/PythonApplication1/PythonApplication1/photos
#C:/Users/Public/Documents/ImageProcessing/Users_images
from logging import exception
import telebot
import config
from telebot import types
import time
from requests import get
import cv2
import numpy as np
import os
from transliterate import translit

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def adjust_gamma(image, gamma = 1.0):
    invGamma = 1.0 / gamma
    table = np.array([((i / 255.0) ** invGamma) * 255
        for i in np.arange(0, 256)]).astype("uint8")
    return cv2.LUT(image, table)
def replyer(message):
    MypyBot.reply_to(message, message.text)
def send_error_to_user(message, error_type):
    MypyBot.send_message(message.chat.id, error_type, parse_mode='html')
    MypyBot.send_sticker(message.chat.id, open('Stickers/error.webp', 'rb'))

def create_save_path(message, images_type):
    user_images_dir = os.path.join(main_img_dir, translit(message.from_user.first_name, language_code='ru', reversed=True))
    src = os.path.join(user_images_dir, images_type + "_" + translit(message.from_user.first_name, language_code='ru', reversed=True) + ".jpg")
    return src

def send_img_text_sticker(message, img_path, text, sticker, reply_markup):
    if img_path is not None:
        try:
            MypyBot.send_photo(message.chat.id, photo=open(img_path, 'rb'))
        except:
            try:
                MypyBot.send_photo(message.chat.id, get(img_path).content)
            except:
                send_error_to_user(message, "–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é")
    send = MypyBot.send_message(message.chat.id, text, parse_mode='html', reply_markup = reply_markup)
    MypyBot.send_sticker(message.chat.id, open('Stickers/{}.webp'.format(sticker), 'rb'))
    return send

main_img_dir = "C:/Users/Public/Documents/ImageProcessing/Users_images"
tokens = {"icecream": False, 'source': False, 'negative': False, 'gamma': False, 'gray': False, 'sepia': False, "counters": False}

MypyBot = telebot.TeleBot(config.TOKEN, parse_mode = None)

@MypyBot.message_handler(commands = ['start'])
def start_message(message):
  MypyBot.send_message(message.chat.id, 
                       "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –í—Å–µ–º–æ–≥—É—â–µ–µ –í—Å–µ—Å—É—â–µ–µ –ó–ª–æ!\n –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ".format(message.from_user, MypyBot.get_me()),
                       parse_mode='html', reply_markup = start_markup)
  # MypyBot.send_photo(message.chat.id, get("https://ih1.redbubble.net/image.990178510.9245/pp,840x830-pad,1000x1000,f8f8f8.jpg").content)
  MypyBot.send_sticker(message.chat.id, open('Stickers/hello.webp', 'rb'))

# –ù–∞–±–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
button_IceCrem = types.KeyboardButton("üçß –•–æ—á—É –º–æ—Ä–æ–∂–µ–Ω–∫—É")
button_LetsWork = types.KeyboardButton("üé® –ú–Ω–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
start_markup.add(button_IceCrem, button_LetsWork)

process_images_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
process_images_markup.add(button_LetsWork)

Filters = types.ReplyKeyboardMarkup(resize_keyboard=True)
button_sourse = types.KeyboardButton("–ò—Å—Ö–æ–¥–Ω–∏–∫")
button_negative = types.KeyboardButton("–ù–µ–≥–∞—Ç–∏–≤")
button_gamma = types.KeyboardButton("–ì–∞–º–º–∞ –§–∏–ª—å—Ç—Ä")
button_gray = types.KeyboardButton("–ß–µ—Ä–Ω–æ-–±–µ–ª—ã–π")
button_counters = types.KeyboardButton("–í—ã–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ç—É—Ä—ã")
button_tired = types.KeyboardButton("–£—Å—Ç–∞–ª, –ø–µ—Ä–µ—Ä—ã–≤ ?")
Filters.add(button_sourse, button_negative, button_gamma, button_gray, button_counters, button_tired)

baby_help_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
button_dark = types.KeyboardButton("0.5 –ù–µ–º–Ω–æ–≥–æ –∑–∞—Ç–µ–º–Ω–∏—Ç—å")
button_light = types.KeyboardButton("1.5 –ù–µ–º–Ω–æ–≥–æ –æ—Å–≤–µ—Ç–ª–∏—Ç—å")
button_enough = types.KeyboardButton("–ü–µ—Ä–µ—Å—Ç–∞–Ω—å (reset brightnes)")
baby_help_markup.add(button_dark, button_light)
baby_enough_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
baby_enough_markup.add(button_dark, button_light, button_enough)

Remove_buttons = telebot.types.ReplyKeyboardRemove()

@MypyBot.message_handler(content_types = ['text'])
def StartWork(message):
    if message.text == 'üçß –•–æ—á—É –º–æ—Ä–æ–∂–µ–Ω–∫—É':
        if tokens['icecream'] == False:
            send = send_img_text_sticker(message,
                                "https://tortodelfeo.ru/wa-data/public/shop/products/88/27/2788/images/2648/2648.750.png",
                                "–£–ø—Å, —è —É–∂–µ –≤—Å–µ —Å—ä–µ–ª–∞",
                                "hehe",
                                None)
            tokens['icecream'] = True
            MypyBot.register_next_step_handler(send, StartWork)
        else:
            send = send_img_text_sticker(message, None, "–î—É–º–∞–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—É–ø—Å–∏–∫ ?", "he", None)
            MypyBot.register_next_step_handler(send, StartWork)
    elif message.text == 'üé® –ú–Ω–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ':
        markup_for_answer_two = types.InlineKeyboardMarkup(row_width = 2)
        button_Yes = types.InlineKeyboardButton("–î–∞", callback_data='yes')
        button_No = types.InlineKeyboardButton("–ù–µ—Ç", callback_data='no')
        markup_for_answer_two.add(button_Yes, button_No)
        send = send_img_text_sticker(message, None, '–¢–µ–±–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å 18 ?', "18", markup_for_answer_two)
        MypyBot.send_message(message.chat.id, "", reply_markup = Remove_buttons) 
        MypyBot.register_next_step_handler(send, handle_docs_photo)
        # –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏ ?
    else:
        send_img_text_sticker(message, None, "–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢", "noanswer", start_markup)

def LetsGetWork(message):
    if message.text == '–ò—Å—Ö–æ–¥–Ω–∏–∫':
        if tokens.get('sourse') == True:
            try:
                img_path = create_save_path(message, "source")
                send = send_img_text_sticker(message, img_path, "–° —Ç–∞–∫–æ–≥–æ —Ä–∞–∫—É—Ä—Å–∞ —Å—Ç–∞–ª–æ —Ç–æ–ª—å–∫–æ —Ö—É–∂–µ XD", "haha", None)
                MypyBot.register_next_step_handler(send, LetsGetWork)
            except Exception as e:
                send_error_to_user(message, "–û–π, –∞ —è –Ω–µ –≤–∏–¥–µ–ª–∞ —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ—á–µ–∫ –µ—â–µ, —Å–µ–º–ø–∞–π...")
        else:
            send_error_to_user(message, "–û–π, –∞ —è –Ω–µ –≤–∏–¥–µ–ª–∞ —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ—á–µ–∫ –µ—â–µ, —Å–µ–º–ø–∞–π...")
    elif message.text == '–ù–µ–≥–∞—Ç–∏–≤':
        if tokens.get('sourse') == True:
            if tokens.get('negative') == False:
                src_img_path = create_save_path(message, "source")
                img_path = create_save_path(message, "negative")
                img = cv2.imread(src_img_path)
                img_not = cv2.bitwise_not(img)
                cv2.imwrite(img_path, img_not)
                send = send_img_text_sticker(message, img_path, "–ú–º–º, –∫–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ—á–∫–∞", "looksgood", None)
                tokens['negative'] = True
                MypyBot.register_next_step_handler(send, LetsGetWork)
            else:
                img_path = create_save_path(message, "negative")
                send = send_img_text_sticker(message, img_path, "–Ø —á—Ç–æ —Ç–µ–±–µ —Ä–æ–±–æ—Ç —Ç—É–¥–∞ —Å—é–¥–∞ –µ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å?", "iamnotarobot")
                MypyBot.register_next_step_handler(send, LetsGetWork)
        else:
            send_error_to_user(message, "–û–π, –∞ —è –Ω–µ –≤–∏–¥–µ–ª–∞ —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ—á–µ–∫ –µ—â–µ, —Å–µ–º–ø–∞–π...")
    elif message.text == '–ß–µ—Ä–Ω–æ-–±–µ–ª—ã–π':
        if tokens.get('sourse') == True:
            if tokens.get('gray') == False:
                src_img_path = create_save_path(message, "source")
                img_path = create_save_path(message, "gray")
                img = cv2.imread(src_img_path)
                img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                cv2.imwrite(img_path, img_gray)
                MypyBot.send_photo(message.chat.id, photo=open(img_path, 'rb'))
                send = MypyBot.send_message(message.chat.id, "–ú–º–º, –∫–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ—á–∫–∞")
                MypyBot.send_sticker(message.chat.id, open('Stickers/looksgood.webp', 'rb'))
                tokens['gray'] = True
                MypyBot.register_next_step_handler(send, LetsGetWork)
            else:
                img_path = create_save_path(message, "gray")
                send = MypyBot.send_message(message.chat.id, "–Ø —á—Ç–æ —Ç–µ–±–µ —Ä–æ–±–æ—Ç —Ç—É–¥–∞ —Å—é–¥–∞ –µ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å?")
                MypyBot.send_photo(message.chat.id, photo=open(img_path, 'rb'))
                MypyBot.send_sticker(message.chat.id, open('Stickers/iamnotarobot.webp', 'rb'))
                MypyBot.register_next_step_handler(send, LetsGetWork)
        else:
            MypyBot.reply_to(message, "–û–π, –∞ —è –Ω–µ –≤–∏–¥–µ–ª–∞ —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ—á–µ–∫ –µ—â–µ, —Å–µ–º–ø–∞–π...")
            MypyBot.send_sticker(message.chat.id, open('Stickers/error.webp', 'rb'))
    elif message.text == '–ì–∞–º–º–∞ –§–∏–ª—å—Ç—Ä':
        if tokens.get('sourse') == True:
            if tokens.get('gamma') == False:
                send = send_img_text_sticker(message, None, "–¢–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–º–º–∞, –º–∏–ª–∞—à–∫–∞?","mayi", baby_help_markup)
                MypyBot.register_next_step_handler(send, Gamma_Function)
            else:
                send = send_img_text_sticker(message, None, "–í–≤–µ–¥–∏ —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–º–º–∞, —Å–ª–∞–¥–∫–∏–π", "giveme", baby_enough_markup)
                MypyBot.register_next_step_handler(send, Gamma_Function)

        else:    
            send_error_to_user(message, "–û–π, –∞ —è –Ω–µ –≤–∏–¥–µ–ª–∞ —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ—á–µ–∫ –µ—â–µ, —Å–µ–º–ø–∞–π...")  
    elif message.text == "–í—ã–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ç—É—Ä—ã":
        if tokens.get('sourse') == True:
            if tokens.get('counters') == False:
                src_img_path = create_save_path(message, "source")
                img_path = create_save_path(message, "counters")
                img = cv2.imread(src_img_path)
                img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                ret, thresh = cv2.threshold(img_gray, 150, 255, cv2.THRESH_BINARY)
                contours, hierarchy = cv2.findContours(image=thresh, mode=cv2.RETR_TREE, method=cv2.CHAIN_APPROX_NONE)
                image_countered = img.copy()
                cv2.drawContours(image=image_countered, contours=contours, contourIdx=-1, color=(0, 255, 0), thickness=2, lineType=cv2.LINE_AA)
                cv2.imwrite(img_path, image_countered)
                send = send_img_text_sticker(message, img_path, "–ê—Ö, –∫–∞–∫ –∂–µ —è —Ö–æ—Ä–æ—à–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∞", "wow", None)
                tokens['counters'] = True
                MypyBot.register_next_step_handler(send, LetsGetWork)
            else:
                img_path = create_save_path(message, "counters")
                send = send_img_text_sticker(message, img_path, "–¢—ã —É–∂–µ –≤—ã–¥–µ–ª—è–ª –∫–æ–Ω—Ç—É—Ä—ã, –∏–º–µ–π —Å–æ–≤–µ—Å—Ç—å! –Ø —Ç—É—Ç –Ω–µ –±–µ–∑ –¥–µ–ª–∞ —Å–∏–∂—É ...", "tired")
                MypyBot.register_next_step_handler(send, LetsGetWork)
        else:
            send_error_to_user(message, "–û–π, –∞ —è –Ω–µ –≤–∏–¥–µ–ª–∞ —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ—á–µ–∫ –µ—â–µ, —Å–µ–º–ø–∞–π...")
    elif message.text == "–£—Å—Ç–∞–ª, –ø–µ—Ä–µ—Ä—ã–≤ ?":
            send = send_img_text_sticker(message, None, "–î–∞–≤–∞–π —è —Ç–µ–±—è —Ä–∞—Å—Å–ª–∞–±–ª—é ...", "relax", start_markup)
            MypyBot.register_next_step_handler(send, StartWork)
    else:
        send = send_img_text_sticker(message, None, "–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢", "noanswer", start_markup)
        MypyBot.register_next_step_handler(send, StartWork)

def Gamma_Function(message):
    flag = 0
    if message.text == '0.5 –ù–µ–º–Ω–æ–≥–æ –∑–∞—Ç–µ–º–Ω–∏—Ç—å':
        if tokens.get('gamma') == False:
            src_img_path = create_save_path(message, "source")
        else:
            src_img_path = create_save_path(message, "gamma")
        img_path = create_save_path(message, "gamma")
        img = cv2.imread(src_img_path)
        img_gamma = adjust_gamma(img, 0.5)
        img = cv2.imwrite(img_path, img_gamma)
        send = send_img_text_sticker(message, img_path, "–£—Ö, –∫–∞–∫ –∂–µ –∫—Ä–∞—Å–∏–≤–æ —Å—Ç–∞–ª–æ", "beautiful", Filters)
        tokens['gamma'] = True
        MypyBot.register_next_step_handler(send, LetsGetWork)
    elif message.text == '1.5 –ù–µ–º–Ω–æ–≥–æ –æ—Å–≤–µ—Ç–ª–∏—Ç—å':
        if tokens.get('gamma') == False:
            src_img_path = create_save_path(message, "source")
        else:
            src_img_path = create_save_path(message, "gamma")
        img_path = create_save_path(message, "gamma")
        img = cv2.imread(src_img_path)
        img_gamma = adjust_gamma(img, 1.5)
        img = cv2.imwrite(img_path, img_gamma)
        send = send_img_text_sticker(message, img_path, "–ù–∞–º–Ω–æ–≥–æ –ª—É—á—à–µ, —á–µ–º –±—ã–ª–æ üòâ", "nowbetter", Filters)
        tokens['gamma'] = True
        MypyBot.register_next_step_handler(send, LetsGetWork)
    elif message.text == '–ü–µ—Ä–µ—Å—Ç–∞–Ω—å (reset brightnes)':
        send = send_img_text_sticker(message, None, "–õ–∞–¥–Ω–æ, –ª–∞–¥–Ω–æ", "evil", Filters)
        tokens['gamma'] = False
        MypyBot.register_next_step_handler(send, LetsGetWork)
    else:
        try:
            gamma = (float)(message.text)
        except Exception as e:
            if flag == 0:
                send = send_img_text_sticker(message, None, "–ì–∞–º–º–∞ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ! –ü–ª–æ—Ö–æ–π –º–∞–ª—å—á–∏–∫!", "kus", baby_help_markup)
                MypyBot.register_next_step_handler(send, Gamma_Function)
                flag = 1
            else:
                send = send_img_text_sticker(message, None, "–ò–∑–¥–µ–≤–∞–µ—à—å—Å—è, –¥–∞?", "cry", Filters)
                MypyBot.register_next_step_handler(send, LetsGetWork)
        if tokens.get('gamma') == False:
            src_img_path = create_save_path(message, "source")
        else:
            src_img_path = create_save_path(message, "gamma")
        img_path = create_save_path(message, "gamma")
        img = cv2.imread(src_img_path)
        img_gamma = adjust_gamma(img, gamma)
        img = cv2.imwrite(img_path, img_gamma)
        send = send_img_text_sticker(message, img_path, "–û –¥–∞, —è –¥–∞–∂–µ –Ω–µ –æ–∂–∏–¥–∞–ª–∞, —á—Ç–æ —Ç–∞–∫ —Ö–æ—Ä–æ—à–æ –ø–æ–ª—É—á–∏—Ç—Å—è", "thatsgood", Filters)
        MypyBot.register_next_step_handler(send, LetsGetWork)

@MypyBot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'yes':
                MypyBot.send_message(call.message.chat.id, '–¢–æ–≥–¥–∞ –∫–∏–Ω—å —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É... üòä')
                MypyBot.send_sticker(call.message.chat.id, open('Stickers/giveaphoto.webp', 'rb'))
            elif call.data == 'no':
                MypyBot.send_message(call.message.chat.id, '–ù—É –Ω–∏—á–µ–≥–æ, —Å–æ –≤—Å–µ–º–∏ –±—ã–≤–∞–ª–æ, –∑–∞–≥—Ä—É–∂–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!')
                MypyBot.send_sticker(call.message.chat.id, open('Stickers/giveaphoto.webp', 'rb'))

            # elif call.data == 'minus_morojenka':
            #     MypyBot.send_message(call.message.chat.id, '–¢–æ–≥–¥–∞ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –µ–≥–æ...')
 
            # remove inline buttons
            MypyBot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–¢–µ–±–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å 18 ?',
                reply_markup=None)
            # MypyBot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ü—Ä–∏–¥–µ—Ç—Å—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ :(",
            #     reply_markup=None)
 
            # show alert
            time.sleep(4)
            MypyBot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                                            text = "–Ø —É–∂–µ –∑–∞–∂–¥–∞–ª–∞—Å—å —Ç–≤–æ–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–∏–∫")
 
    except Exception as e:
        print(repr(e))

@MypyBot.message_handler(content_types = ['photo'])
def handle_docs_photo(message):
    try:
        file_info = MypyBot.get_file(message.photo[len(message.photo)-1].file_id)
        downloaded_img = MypyBot.download_file(file_info.file_path)
        src = create_save_path(message, "source")
        try:
            with open(src, 'wb') as saved_cup:
                saved_cup.write(downloaded_img)
        except Exception as e:
            user_images_dir = os.path.join(main_img_dir, translit(message.from_user.first_name, language_code='ru', reversed=True))
            os.mkdir(user_images_dir)
            with open(src, 'wb') as saved_cup:
                saved_cup.write(downloaded_img)
        
        send = send_img_text_sticker(message, None, "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –±—Ä–∞—Ç–∏–∫, –±–µ–∑ —Å–ª—ë–∑ –Ω–µ –≤–∑–≥–ª—è–Ω–µ—à—å, –¥–∞–π–∫–∞ —è –ø–æ—Ä–∞–±–æ—Ç–∞—é", "omg", Filters)
        tokens['sourse'] = True
        tokens['negative'] = False
        tokens['gamma'] = False
        tokens['gray'] = False
        tokens['sepia'] = False
        tokens['counters'] = False
        MypyBot.register_next_step_handler(send, LetsGetWork)
    except Exception as e:
        send = send_error_to_user(message, "–£ –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç—ã –±—ã–ª —Å–ª–∏—à–∫–æ–º —Ä–µ–∑–æ–∫.. \n –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ üòü")
        MypyBot.register_next_step_handler(send, handle_docs_photo)

# RUN
MypyBot.polling(none_stop=True)